/*
 * View to excel.ajs 
 *
 * Export view elements to Excel
 * 
 * 
 * Uses MyExcel https://github.com/jsegarra1971/MyExcel
 * 
 * (c) 2018 David Å karka
 * 
 * 
 */

// Load MyExcel and JSZip JS file
load(__DIR__ + "../examples/lib/jszip-101.js");
load(__DIR__ + "../examples/lib/myexcel.js");

// Ehether ALL elements on view or only THE FIRST LEVEL (no childs of child)
var ALL_ELEMENTS = false;

// Selects diagram: by name or actually selected
function selectDiagram(diagramName) {
  var diagram = "not selected";
  if(diagramName) {
    diagram =  $("archimate-diagram-model").filter("."+diagramName).first();     
  } else {
    diagram = $(selection).filter("archimate-diagram-model").first();
  }
  return(diagram);
}


// Show output in the console
console.show();
console.clear()
console.log("> Starting Excel Export");

// Create a new Excel file with a default font and colour
var excel = $JExcel.new("Calibri 12 #333333");

var selectedDiagram = selectDiagram("");

// Add a new sheet with a name
excel.set( { sheet:0, value:selectedDiagram.name } );

// Set up some headers
var headers = [
	"Name",
	"Documentation",
	"ID",
	"Type"
];        

// Format the header with a style
var formatHeader = excel.addStyle ({
    fill: "#dddddd",
	border: "thin, thin, thin, thin #555555",
	font: "Calibri 12 #000000 B",
});

// Set the headers
for(var i = 0; i < headers.length; i++) {
    excel.set(0, i, 0, headers[i], formatHeader);
    excel.set(0, i, undefined, "auto"); // column width is auto
}

var current_row = 1;

// Finds visual elements. No relationships, notes, etc.
var visuals;
if(ALL_ELEMENTS)  visuals = $(selectedDiagram).find("element");
else visuals = $(selectedDiagram).children("element");
console.log("elements: " + visuals.size());

// Loop through all elements and set cells to elememt info
visuals.forEach(function(vis) {
	excel.set(0, 0, current_row, vis.name);
	excel.set(0, 1, current_row, vis.documentation);
	excel.set(0, 2, current_row, vis.id);
  excel.set(0, 3, current_row, vis.type);
  current_row++;
})

// Open a dialog to let the user choose where to save the generated file
var defaultFileName = selectedDiagram.name ? selectedDiagram.name + ".xlsx" : model.name+".xlsx"; // Default file name
defaultFileName = defaultFileName.replace(/:/gi, "_");
defaultFileName = defaultFileName.replace(/\//gi, "_");
defaultFileName = defaultFileName.replace(/\\/gi, "_");
var exportFile = window.promptSaveFile({ title: "Export to Excel", filterExtensions: [ "*.xlsx" ], fileName: defaultFileName } );

if(exportFile != null) {
	excel.generate(exportFile);
	console.log("> Export done");
}
else {
	console.log("> Export cancelled");
}
