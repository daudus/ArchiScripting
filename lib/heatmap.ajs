/*
 * heatmap.ajs
 * 
 * Heat Mapping on Diagrams for Archi tool.
 * 
 * It is javaScript library and project has to define any <colorizing> function given a value return a colorsuch as:
 * function colorize(prop)
 *  {
 *     if (prop=="X") return chroma('red');
 *     else if (prop =="Y") return chroma('blue');
 *     else return "#0000FF";
 *   }
 *
 * Usage: callexample. No diagram name means actaully selected one 
 * makeHeatMap("heatmap-cycle","application-component","cycle", colorize)
 * makeHeatMap("","application-component","cycle", colorize)
 * 
 * 
 * (c) 2018 David Å karka
 * 
 * 
 */



// Library for colors manipulation
load('https://cdnjs.cloudflare.com/ajax/libs/chroma-js/1.4.0/chroma.min.js');

var DEBUG = false;
var APPLICATION_LAYER_DEF_COLOR = chroma(181,255,255);

initLog();
 
//initiates the logging feature
function initLog() {
  if (DEBUG) {
    console.show();
    console.clear();
    console.log("LOGGING INITIATED");
  }
}

// Logs message
function log(msg) {
  if (DEBUG) console.log(msg);
}

// Default Colorizing
function defaultColorAppLayer() {
  return APPLICATION_LAYER_DEF_COLOR;
} 

// Selects diagram: by name or actually selected
function selectDiagram(diagramName) {
  var diagram = "not selected";
  if(diagramName) {
    diagram =  $("archimate-diagram-model").filter("."+diagramName).first();     
  } else {
    diagram = $(selection).filter("archimate-diagram-model").first();
  }
  log("Selected diagram: " + diagram.name);
  return(diagram);
}

//  for diagram, colorize  components of componentType according to their propertyName values
function makeHeatMap(diagramName,componentType,propertyName, colorFct)
{
  diagram = selectDiagram(diagramName);
  visuals = $(diagram).find(componentType);


  visuals.forEach(function(vis) {
    var propertyValue = vis.prop(propertyName);
    log("Concept: " + vis.name + "|Property: " + propertyName + "|Value: " + propertyValue);
    var color = colorFct(propertyValue);
    vis.fillColor = color;
  })
}


